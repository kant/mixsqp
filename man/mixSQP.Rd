% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mixSQP.R
\name{mixSQP}
\alias{mixSQP}
\title{mixSQP}
\usage{
mixSQP(L, x0 = rep(1, dim(L)[2])/dim(L)[2], w = rep(1, dim(L)[1])/dim(L)[1],
  convtol = 1e-08, sparsetol = 0.001, eps = 1e-06, maxiter = 50,
  maxqpiter = 100, verbose = TRUE)
}
\arguments{
\item{L}{A matrix of nonnegative entries of size n by m}

\item{x0}{A initial value for the optimization problem (default rep(1,m)/m).}

\item{w}{A vector of weight on each data point (default rep(1,n)/n).}

\item{convtol}{A convergence tolerance used for algorithm's
convergence criterion.}

\item{sparsetol}{A tolerance used for determining active indices.}

\item{eps}{A small constant to safeguard from a numerical issue
(default 1e-6).}

\item{maxiter}{A maximum number of outer loop iterations,
determining how many qp subproblems will be solved at most.}

\item{maxqpiter}{A maximum number of inner loop iterations,
determining how many active-set subproblems will be solved at most.}

\item{verbose}{A logical indicating if it shows progress of the
algorithm at each iteration.}
}
\value{
Returns a solution x (in the current version).
}
\description{
mixSQP solves a convex optimization problem in
https://arxiv.org/abs/1806.01412.
It implements a sequential quadratic programming with
active-set subproblem solvers. For gigantic data, use low-rank
approximation to speed up the computation.

When L is a (n) by (m) matrix of nonnegative entries, mixSQP
maximizes the following objective function \deqn{f(x) = \sum_j w_j
log (\sum_k L_jk x_k)} subject to the (unit) probability simplex
constraint \deqn{\sum_k x_k = 1, x_k \ge 0} Without loss of
generality \eqn{\sum_j w_j = 1} is required.
}
\examples{
n  <- 1e5
m  <- 20
w  <- rep(1,n)/n; # weights
L  <- testdata(n,m, mix_type = "mix_n") # Create some simulated data
x0 <- rep(1,m)/m # initialization
out <- mixSQP(L,x0,w)

}
